# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protos import chat_pb2 as protos_dot_chat__pb2


class ChatServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Receiver = channel.unary_stream(
                '/chat.ChatService/Receiver',
                request_serializer=protos_dot_chat__pb2.Empty.SerializeToString,
                response_deserializer=protos_dot_chat__pb2.ChatMessage.FromString,
                )
        self.Sender = channel.unary_unary(
                '/chat.ChatService/Sender',
                request_serializer=protos_dot_chat__pb2.ChatMessage.SerializeToString,
                response_deserializer=protos_dot_chat__pb2.Empty.FromString,
                )


class ChatServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Receiver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sender(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Receiver': grpc.unary_stream_rpc_method_handler(
                    servicer.Receiver,
                    request_deserializer=protos_dot_chat__pb2.Empty.FromString,
                    response_serializer=protos_dot_chat__pb2.ChatMessage.SerializeToString,
            ),
            'Sender': grpc.unary_unary_rpc_method_handler(
                    servicer.Sender,
                    request_deserializer=protos_dot_chat__pb2.ChatMessage.FromString,
                    response_serializer=protos_dot_chat__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Receiver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/chat.ChatService/Receiver',
            protos_dot_chat__pb2.Empty.SerializeToString,
            protos_dot_chat__pb2.ChatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Sender(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/Sender',
            protos_dot_chat__pb2.ChatMessage.SerializeToString,
            protos_dot_chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
